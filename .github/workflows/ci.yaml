name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  POETRY_VIRTUALENVS_IN_PROJECT: true

jobs:
  lint:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, 'ci skip') }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: pip install poetry
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-py3.8-${{ hashFiles('**/poetry.lock') }}
      - name: Install package
        run: poetry install
      - name: Run linters
        run: poetry run poe lint

  test:
    needs: lint
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        python: [3.7, 3.8]
        include:
          - os: macos-latest
            python: 3.8
          - os: windows-latest
            python: 3.8
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - run: pip install poetry
      - name: Set up cache
        uses: actions/cache@v2
        with:
          path: .venv
          key: ${{ runner.os }}-venv-py${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install package
        run: poetry install -E crypto
      - name: Run tests
        run: poetry run poe test

  release:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Bump version
        uses: TriPSs/conventional-changelog-action@v3
        id: version
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          git-user-name: "GitHub Actions"
          git-user-email: "action@github.com"
          version-file: pyproject.toml
          version-path: tool.poetry.version
          preset: conventionalcommits
          output-file: false
      - name: Set new commit hash
        run: echo "SHA=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Create release
        uses: actions/create-release@v1
        if: ${{ steps.version.outputs.skipped == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          release_name: ${{ steps.version.outputs.tag }}
          body: ${{ steps.version.outputs.clean_changelog }}
          commitish: ${{ env.SHA }}
      - name: Publish to PyPI
        if: ${{ steps.version.outputs.skipped == 'false' }}
        env:
          # https://github.com/python-poetry/poetry/issues/2359
          POETRY_HTTP_BASIC_PYPI_USERNAME: __token__
          POETRY_HTTP_BASIC_PYPI_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip install poetry
          poetry publish --build --no-interaction
