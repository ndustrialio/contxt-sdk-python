{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 This software development kit (SDK) gives you quick access to the set of Contxt API's from https://ndustrial.io , both programatically and on the command line. Install \u00b6 Before proceeding, you must have Python 3.7+ installed. Library \u00b6 To install and use this SDK as a library, just use pip : python3 -m pip install --upgrade contxt-sdk CLI \u00b6 If you only need the CLI, the above method will work fine. However, we recommend using pipx 1 : # Setup pipx (once only) python3 -m pip install --user pipx python3 -m pipx ensurepath # Install pipx install contxt-sdk # Upgrade pipx upgrade contxt-sdk Run the following to ensure the installation was successful: $ contxt --version contxt, version 2.1.4 Why pipx? See here \u21a9","title":"Overview"},{"location":"#overview","text":"This software development kit (SDK) gives you quick access to the set of Contxt API's from https://ndustrial.io , both programatically and on the command line.","title":"Overview"},{"location":"#install","text":"Before proceeding, you must have Python 3.7+ installed.","title":"Install"},{"location":"#library","text":"To install and use this SDK as a library, just use pip : python3 -m pip install --upgrade contxt-sdk","title":"Library"},{"location":"#cli","text":"If you only need the CLI, the above method will work fine. However, we recommend using pipx 1 : # Setup pipx (once only) python3 -m pip install --user pipx python3 -m pipx ensurepath # Install pipx install contxt-sdk # Upgrade pipx upgrade contxt-sdk Run the following to ensure the installation was successful: $ contxt --version contxt, version 2.1.4 Why pipx? See here \u21a9","title":"CLI"},{"location":"cli/","text":"Quickstart \u00b6 Login \u00b6 To access any Contxt API, first login with your Contxt credentials: contxt auth login This will open a browser window, ask you to login (if not already), and confirm a code. If this succeeds, you should see something like Your device is now connected. Usage \u00b6 The CLI's general usage pattern is: contxt [entity] [action] For example, to get all orgs : contxt orgs get See all supported commands here .","title":"Quickstart"},{"location":"cli/#quickstart","text":"","title":"Quickstart"},{"location":"cli/#login","text":"To access any Contxt API, first login with your Contxt credentials: contxt auth login This will open a browser window, ask you to login (if not already), and confirm a code. If this succeeds, you should see something like Your device is now connected.","title":"Login"},{"location":"cli/#usage","text":"The CLI's general usage pattern is: contxt [entity] [action] For example, to get all orgs : contxt orgs get See all supported commands here .","title":"Usage"},{"location":"cli/commands/","text":"contxt \u00b6 Contxt CLI Usage: contxt [OPTIONS] COMMAND [ARGS]... Options: --env [production|staging] Environment for all API's --org TEXT Organization slug -v, --verbose Increase verbosity -V, --version Show the version and exit. -h, --help Show this message and exit.","title":"contxt"},{"location":"cli/commands/#contxt","text":"Contxt CLI Usage: contxt [OPTIONS] COMMAND [ARGS]... Options: --env [production|staging] Environment for all API's --org TEXT Organization slug -v, --verbose Increase verbosity -V, --version Show the version and exit. -h, --help Show this message and exit.","title":"contxt"},{"location":"sdk/worker/","text":"Worker \u00b6 We define a worker to be a machine client that operates on a schedule. This client also has associated scopes and roles to restrict how it can communicate with a Contxt API. Machine Client \u00b6 Within Contxt, a machine client is identified by a unique client id and secret pair. These credentials are generated for you when creating a service in Contxt. For more detailed information about this authentication flow, see here . Base Worker Class \u00b6 Our SDK provides a BaseWorker class to help abstract the authentication process between a machine client and a Contxt API. Upon instantation, the class will look for your machine credientials in the environment variables CLIENT_ID and CLIENT_SECRET , and then store this pair as the attribute auth . Next, your worker's business logic is defined in the do_work() method. If we need to make requests to a Contxt API here, we simply inject our credentials when instantiating the service class (i.e. FacilitiesService(self.auth) ). Now, that class handles generating, sending, and refreshing your JWT to authenticate requests to that API. For a more concrete example: from contxt.services.facilities import FacilitiesService from contxt.workers import BaseWorker class ExampleWorker(BaseWorker): def __init__(self): super().__init__() self.facilities_service = FacilitiesService(self.auth) def do_work(self): facilities = self.facilities_service.get_facilities() print(facilities) if __name__ == \"__main__\": worker = ExampleWorker() worker.do_work()","title":"Worker"},{"location":"sdk/worker/#worker","text":"We define a worker to be a machine client that operates on a schedule. This client also has associated scopes and roles to restrict how it can communicate with a Contxt API.","title":"Worker"},{"location":"sdk/worker/#machine-client","text":"Within Contxt, a machine client is identified by a unique client id and secret pair. These credentials are generated for you when creating a service in Contxt. For more detailed information about this authentication flow, see here .","title":"Machine Client"},{"location":"sdk/worker/#base-worker-class","text":"Our SDK provides a BaseWorker class to help abstract the authentication process between a machine client and a Contxt API. Upon instantation, the class will look for your machine credientials in the environment variables CLIENT_ID and CLIENT_SECRET , and then store this pair as the attribute auth . Next, your worker's business logic is defined in the do_work() method. If we need to make requests to a Contxt API here, we simply inject our credentials when instantiating the service class (i.e. FacilitiesService(self.auth) ). Now, that class handles generating, sending, and refreshing your JWT to authenticate requests to that API. For a more concrete example: from contxt.services.facilities import FacilitiesService from contxt.workers import BaseWorker class ExampleWorker(BaseWorker): def __init__(self): super().__init__() self.facilities_service = FacilitiesService(self.auth) def do_work(self): facilities = self.facilities_service.get_facilities() print(facilities) if __name__ == \"__main__\": worker = ExampleWorker() worker.do_work()","title":"Base Worker Class"}]}